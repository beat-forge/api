//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "versions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub mod_id: Uuid,
    pub approved: Option<bool>,
    #[sea_orm(column_type = "Text")]
    pub version: String,
    #[sea_orm(unique)]
    pub stats: Uuid,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::mods::Entity",
        from = "Column::ModId",
        to = "super::mods::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Mods,
    #[sea_orm(
        belongs_to = "super::version_stats::Entity",
        from = "Column::Stats",
        to = "super::version_stats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    VersionStats,
}

impl Related<super::version_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VersionStats.def()
    }
}

impl Related<super::mods::Entity> for Entity {
    fn to() -> RelationDef {
        super::mod_versions::Relation::Mods.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::mod_versions::Relation::Versions.def().rev())
    }
}

impl Related<super::beat_saber_versions::Entity> for Entity {
    fn to() -> RelationDef {
        super::version_beat_saber_versions::Relation::BeatSaberVersions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::version_beat_saber_versions::Relation::Versions
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
