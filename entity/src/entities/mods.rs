//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "mods")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", unique)]
    pub slug: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub cover: Option<String>,
    pub author: Option<Uuid>,
    pub category: Option<Uuid>,
    #[sea_orm(unique)]
    pub stats: Option<Uuid>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::categories::Entity",
        from = "Column::Category",
        to = "super::categories::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Categories,
    #[sea_orm(
        belongs_to = "super::mod_stats::Entity",
        from = "Column::Stats",
        to = "super::mod_stats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ModStats,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Author",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
    #[sea_orm(has_many = "super::versions::Entity")]
    Versions,
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::mod_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ModStats.def()
    }
}

impl Related<super::versions::Entity> for Entity {
    fn to() -> RelationDef {
        super::mod_versions::Relation::Versions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::mod_versions::Relation::Mods.def().rev())
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_mods::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_mods::Relation::Mods.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
