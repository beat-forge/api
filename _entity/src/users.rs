//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub github_id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub display_name: Option<String>,
    #[sea_orm(unique)]
    pub email: String,
    pub bio: Option<String>,
    pub avatar: Option<String>,
    pub banner: Option<String>,
    pub permissions: i32,
    #[sea_orm(unique)]
    pub api_key: Uuid,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mods::Entity")]
    Mods,
    #[sea_orm(has_many = "super::user_mods::Entity")]
    UserMods,
}

impl Related<super::mods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mods.def()
    }
}

impl Related<super::user_mods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserMods.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
