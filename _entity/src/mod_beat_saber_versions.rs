//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "mod_beat_saber_versions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub mod_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub beat_saber_version_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::beat_saber_versions::Entity",
        from = "Column::BeatSaberVersionId",
        to = "super::beat_saber_versions::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    BeatSaberVersions,
    #[sea_orm(
        belongs_to = "super::mods::Entity",
        from = "Column::ModId",
        to = "super::mods::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Mods,
}

impl Related<super::beat_saber_versions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BeatSaberVersions.def()
    }
}

impl Related<super::mods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mods.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
